generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               Int            @id @default(autoincrement())
  email            String         @unique
  password         String
  name             String?
  role             String         @default("user")
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  resetToken       String?
  resetTokenExpiry DateTime?
  flashcards       Flashcard[]
  uploadedMedia    MediaContent[]
  progress         Progress[]
  quizResults      QuizResult[]
  vocabulary       Vocabulary[]
}

model Course {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime
}

model Vocabulary {
  id            Int        @id @default(autoincrement())
  word          String
  definition    String
  example       String?
  pronunciation String?
  partOfSpeech  String?
  synonyms      String[]   @default([])
  difficulty    Difficulty @default(BEGINNER)
  userId        Int
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  repetitions   Int        @default(0)
  nextReview    DateTime   @default(now())
  easeFactor    Float      @default(2.5)
  interval      Int        @default(1)
  user          User       @relation(fields: [userId], references: [id])
}

model Flashcard {
  id          Int        @id @default(autoincrement())
  front       String
  back        String
  category    String
  difficulty  Difficulty
  userId      Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  repetitions Int        @default(0)
  nextReview  DateTime   @default(now())
  easeFactor  Float      @default(2.5)
  interval    Int        @default(1)
  user        User       @relation(fields: [userId], references: [id])
}

model Quiz {
  id          Int          @id @default(autoincrement())
  title       String
  description String?
  category    String
  difficulty  Difficulty
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  questions   Question[]
  quizResults QuizResult[]
}

model Question {
  id            Int          @id @default(autoincrement())
  question      String
  type          QuestionType
  options       String[]     @default([])
  correctAnswer String
  explanation   String?
  quizId        Int
  createdAt     DateTime     @default(now())
  quiz          Quiz         @relation(fields: [quizId], references: [id])
}

model QuizResult {
  id              Int              @id @default(autoincrement())
  userId          Int
  quizId          Int
  score           Int
  totalQuestions  Int
  timeSpent       Int
  completedAt     DateTime         @default(now())
  questionResults QuestionResult[]
  quiz            Quiz             @relation(fields: [quizId], references: [id])
  user            User             @relation(fields: [userId], references: [id])
}

model QuestionResult {
  id             Int        @id @default(autoincrement())
  quizResultId   Int
  questionId     String
  question       String
  selectedOption String
  correctAnswer  String
  isCorrect      Boolean
  timeSpent      Int        @default(0)
  createdAt      DateTime   @default(now())
  quizResult     QuizResult @relation(fields: [quizResultId], references: [id], onDelete: Cascade)
}

model Progress {
  id          Int      @id @default(autoincrement())
  userId      Int
  category    String
  level       Int      @default(1)
  experience  Int      @default(0)
  streak      Int      @default(0)
  lastStudied DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

model MediaContent {
  id            Int        @id @default(autoincrement())
  title         String
  description   String?
  type          MediaType
  filePath      String
  thumbnailPath String?
  duration      Int?
  lyrics        String?
  difficulty    Difficulty @default(BEGINNER)
  category      String?
  tags          String[]   @default([])
  isActive      Boolean    @default(true)
  uploaderId    Int?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  uploader      User?      @relation(fields: [uploaderId], references: [id])
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  FILL_IN_BLANK
}

enum MediaType {
  VIDEO
  AUDIO
  MUSIC_VIDEO
}
